import javax.swing.text.StyledEditorKit;

public class SearchinRotatedSortedArray {
    ///0 1 2 3 4 5 6 7  = numbering of array
    /*{3,4,5,6,7,0,1,2}
   first [ find pivot  ]
   case 1  :-   when {mid} > {mid+1} then founded the pivot [first case ]
   case 2  :-   when {mid} < {mid - 1} like jis element pe dekh rhe h ushe pichla element ushe bda ho
   case 1 and 2 mai aagar mid element end or start element aa gya toh error aa sakta h isliye and wali condition apply kro should end > mid and start < mid
   case 3  :-   when {start element} > {mid element}  like this is arrays { 4,5,6,3,2,1,0 }  start >= mid then ignore like this end element = mid - 1 th element
   case 4  :-   when {start  element} <{mid element}  like this is arrays {3,4,5,6,2} start < mid  then ignore mid and put start = mid +1
   if cant find return whatever you want in question
     */
    static int findpivot(int[] num) {
        int start = 0;
        int end = num.length - 1;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (mid < end && num[mid] > num[mid + 1]) {
                return mid;
            }
            if (mid > start && num[mid] < num[mid - 1]) {
                return mid - 1;
            }
            if (num[mid] <= num[start]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }
     public int BSearch(int[] arr, int tar, int start, int end) {
         while (start <= end) {
             int mid = start + (end - start) / 2;
             if (tar <= arr[mid]) {
                 end = mid + 1;
             } else if (tar >= arr[mid]) {
                 end = mid - 1;
             }
             return mid;

         }
         return -1;
     }
     public int Search( int[] nums, int target){
            int pivot = findpivot(nums);
            if (pivot == -1) {
                return BSearch(nums, target, 0, nums.length - 1);
            }
            if (nums[pivot] == target) {
                return pivot;
            }
            if (target > nums[0]) {
                return BSearch(nums, target, 0, pivot - 1);
            }
            return BSearch(nums, target, 0, nums.length - 1);
     }
    public static void main(String[] args) {
        int[] arr = {4, 5, 6, 7, 0, 1, 2};
        System.out.println(findpivot(arr));
    }
}
